<?php
/**
 * The Payment Helper contains methods dealing with payment relevant information.
 * Examples for this might be f.Ex customer data, formating of basket amounts or similar.
 */
class Paymill_Paymill_Helper_PaymentHelper extends Mage_Core_Helper_Abstract
{
    /**
     * Returns the order amount in the smallest possible unit (f.Ex. cent for the EUR currency)
     * <p align = "center" color = "red">At the moment, only currencies with a 1:100 conversion are supported. Special cases need to be added if necessary</p>
     * @return int Amount in the smallest possible unit
     */
    public function getAmount()
    {
         $decimalTotal = Mage::getSingleton('checkout/session')->getQuote()->getGrandTotal();
         $amountTotal = $decimalTotal * 100;
         return $amountTotal;
    }
    
    /**
     * Returns the currency compliant to ISO 4217 (3 char code)
     * @return string 3 Character long currency code
     */
    public function getCurrency()
    {
         $currency_code = Mage::app()->getStore()->getCurrentCurrencyCode();
         return $currency_code;
    }
    
    /**
     * Returns the description you want to display in the Paymill Backend.
     * The current format is [OrderId] [Email adress of the customer]
     * @return string
     */
    public function getDescription()
    {
        $orderId = $this->getOrderId();
        $customerEmail = Mage::helper("paymill/customerHelper")->getCustomerEmail();
        $description = $orderId. ", " . $customerEmail;
        return $description;
    }
    
    /**
     * Returns the short tag of the Payment
     * @param String $code
     * @return string
     */
    public function getPaymentType($code){
        //Creditcard
        if($code === "paymill_creditcard"){
            $type = "cc";
        }
        //Directdebit
        if($code === "paymill_directdebit"){
            $type = "elv";
        }
        
        return $type;
    }
    
    /**
     * Returns the reserved order id
     */
    public function getOrderId(){
        return Mage::getSingleton('checkout/session')->getQuote()->getReservedOrderId();
    }
    
    
    /**
     * Returns an instance of the paymentProcessor class.
     * @param String $paymentCode name of the payment
     * @param String $token Token generated by the Javascript
     * @param Integer $authorizedAmount Amount used for the Token generation
     * @return Services_Paymill_PaymentProcessor
     */
    public function createPaymentProcessor($paymentCode, $token, $authorizedAmount)
    {
        require_once Mage::getBaseDir('lib') . '/Paymill/v2/lib/Services/Paymill/PaymentProcessor.php';
        $privateKey                 = Mage::helper('paymill/optionHelper')->getPrivateKey();
        $apiUrl                     = Mage::helper('paymill')->getApiUrl();
        $libBase                    = null;
        
        $params                     = array();
        $params['token']            = $token;
        $params['authorizedAmount'] = (int)$authorizedAmount;
        $params['amount']           = (int)$this->getAmount();
        $params['currency']         = $this->getCurrency();
        $params['payment']          = $this->getPaymentType($paymentCode); // The chosen payment (cc | elv) 
        $params['name']             = Mage::helper("paymill/customerHelper")->getCustomerName();
        $params['email']            = Mage::helper("paymill/customerHelper")->getCustomerEmail();
        $params['description']      = $this->getDescription();
        
        return new Services_Paymill_PaymentProcessor($privateKey, $apiUrl, $libBase, $params, Mage::helper('paymill/loggingHelper'));
    }
}
